"""
Configura√ß√£o otimizada do Gunicorn para PaddleOCR
Focada em performance e estabilidade para processamento de OCR
"""

import os
import multiprocessing

# Configura√ß√µes de bind
bind = f"0.0.0.0:{os.getenv('PORT', '8000')}"

# Workers - usar apenas 1 worker para evitar problemas de mem√≥ria com PaddleOCR
workers = int(os.getenv('WORKERS', '1'))

# Tipo de worker - sync √© melhor para processamento pesado de OCR
worker_class = "sync"

# Timeout - aumentado para processamento de arquivos grandes
timeout = int(os.getenv('TIMEOUT', '600'))  # 10 minutos
keepalive = 5

# Preload - carrega a aplica√ß√£o antes de fazer fork dos workers
preload_app = True

# Reciclagem de workers para evitar vazamentos de mem√≥ria
max_requests = int(os.getenv('MAX_REQUESTS', '1000'))
max_requests_jitter = int(os.getenv('MAX_REQUESTS_JITTER', '100'))

# Configura√ß√µes de mem√≥ria
worker_tmp_dir = "/dev/shm"  # Usar RAM para arquivos tempor√°rios (se dispon√≠vel)

# Logging
loglevel = os.getenv('LOG_LEVEL', 'info').lower()
accesslog = "-"  # stdout
errorlog = "-"   # stderr
access_log_format = '%(h)s %(l)s %(u)s %(t)s "%(r)s" %(s)s %(b)s "%(f)s" "%(a)s" %(D)s'

# Configura√ß√µes de processo
user = None
group = None
tmp_upload_dir = None

# Hooks para otimiza√ß√£o
def on_starting(server):
    """Hook executado quando o servidor est√° iniciando"""
    server.log.info("üöÄ Iniciando servidor PaddleOCR otimizado")

def when_ready(server):
    """Hook executado quando o servidor est√° pronto"""
    server.log.info("‚úÖ Servidor PaddleOCR pronto para receber requisi√ß√µes")

def worker_int(worker):
    """Hook executado quando um worker recebe SIGINT"""
    worker.log.info("üîÑ Worker recebeu sinal de interrup√ß√£o")

def pre_fork(server, worker):
    """Hook executado antes de fazer fork de um worker"""
    server.log.info(f"üîß Preparando worker {worker.pid}")

def post_fork(server, worker):
    """Hook executado ap√≥s fazer fork de um worker"""
    server.log.info(f"üéØ Worker {worker.pid} iniciado")

def post_worker_init(worker):
    """Hook executado ap√≥s inicializa√ß√£o do worker"""
    worker.log.info(f"‚ö° Worker {worker.pid} inicializado e pronto")

def worker_abort(worker):
    """Hook executado quando um worker √© abortado"""
    worker.log.error(f"‚ùå Worker {worker.pid} foi abortado")

def pre_exec(server):
    """Hook executado antes de exec"""
    server.log.info("üîÑ Executando pre_exec hook")

# Configura√ß√µes de graceful shutdown
graceful_timeout = 30